// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueServer.Modules.Library.Context;

namespace VueServer.Migrations.SqlServerLibrary
{
    [DbContext(typeof(SqlServerLibraryContext))]
    [Migration("20220822012244_LibraryFirst")]
    partial class LibraryFirst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleAddOn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = "documentation",
                            Name = "Documentation"
                        },
                        new
                        {
                            Id = "notes",
                            Name = "Notes"
                        },
                        new
                        {
                            Id = "library",
                            Name = "Library"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleAddOnId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleAddOn", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ModuleAddOnId");

                    b.HasIndex("ModuleAddOnId");

                    b.ToTable("UserHasModule");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleFeature", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ModuleFeatureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ModuleFeatureId");

                    b.HasIndex("ModuleAddOnId");

                    b.HasIndex("ModuleFeatureId");

                    b.ToTable("UserHasFeature");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.ServerSettings", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSGuestLogin", b =>
                {
                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<long>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FailedLogins")
                        .HasColumnType("int");

                    b.HasKey("IPAddress")
                        .IsClustered(false);

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .IsClustered();

                    b.ToTable("GuestLogin");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .IsClustered();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "user",
                            ClusterId = 1,
                            DisplayName = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "elevated",
                            ClusterId = 2,
                            DisplayName = "Elevated",
                            NormalizedName = "ELEVATED"
                        },
                        new
                        {
                            Id = "administrator",
                            ClusterId = 3,
                            DisplayName = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("ClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PasswordExpired")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("ClusterId")
                        .IsUnique()
                        .IsClustered();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Active = false,
                            ClusterId = 1L,
                            DisplayName = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordExpired = true,
                            PasswordHash = "AQAAAAEAACcQAAAAEKpfG0QHkFNjYgWmzyP2qL1L6onhkLBLk5cdaZwSUyAN0dPdFzZ1n1LqYErLHFhVXg=="
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserInRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleId = "administrator",
                            UserId = "admin"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "admin"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deceased")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookcaseId")
                        .HasColumnType("int");

                    b.Property<bool>("Boxset")
                        .HasColumnType("bit");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hardcover")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("Loaned")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ShelfId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BookcaseId");

                    b.HasIndex("SeriesId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookHasAuthors");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookHasGenres");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Bookcase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bookcases");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Fiction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fiction = false,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 2,
                            Fiction = false,
                            Name = "Autobiography"
                        },
                        new
                        {
                            Id = 3,
                            Fiction = false,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Fiction = false,
                            Name = "Book review"
                        },
                        new
                        {
                            Id = 5,
                            Fiction = false,
                            Name = "Cookbook"
                        },
                        new
                        {
                            Id = 6,
                            Fiction = false,
                            Name = "Diary"
                        },
                        new
                        {
                            Id = 7,
                            Fiction = false,
                            Name = "Dictionary"
                        },
                        new
                        {
                            Id = 8,
                            Fiction = false,
                            Name = "Encyclopedia"
                        },
                        new
                        {
                            Id = 9,
                            Fiction = false,
                            Name = "Guide"
                        },
                        new
                        {
                            Id = 10,
                            Fiction = false,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 11,
                            Fiction = false,
                            Name = "History"
                        },
                        new
                        {
                            Id = 12,
                            Fiction = false,
                            Name = "Journal"
                        },
                        new
                        {
                            Id = 13,
                            Fiction = false,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 14,
                            Fiction = false,
                            Name = "Memoir"
                        },
                        new
                        {
                            Id = 15,
                            Fiction = false,
                            Name = "Prayer"
                        },
                        new
                        {
                            Id = 16,
                            Fiction = false,
                            Name = "Religion, spirituality, and new age"
                        },
                        new
                        {
                            Id = 17,
                            Fiction = false,
                            Name = "Textbook"
                        },
                        new
                        {
                            Id = 18,
                            Fiction = false,
                            Name = "Review"
                        },
                        new
                        {
                            Id = 19,
                            Fiction = false,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 20,
                            Fiction = false,
                            Name = "Self help"
                        },
                        new
                        {
                            Id = 21,
                            Fiction = false,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 22,
                            Fiction = false,
                            Name = "True crime"
                        },
                        new
                        {
                            Id = 23,
                            Fiction = true,
                            Name = "Action and adventure"
                        },
                        new
                        {
                            Id = 24,
                            Fiction = true,
                            Name = "Alternative history"
                        },
                        new
                        {
                            Id = 25,
                            Fiction = true,
                            Name = "Anthology"
                        },
                        new
                        {
                            Id = 26,
                            Fiction = true,
                            Name = "Chick lit"
                        },
                        new
                        {
                            Id = 27,
                            Fiction = true,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 28,
                            Fiction = true,
                            Name = "Comic book"
                        },
                        new
                        {
                            Id = 29,
                            Fiction = true,
                            Name = "Coming-of-age"
                        },
                        new
                        {
                            Id = 30,
                            Fiction = true,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 31,
                            Fiction = true,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 32,
                            Fiction = true,
                            Name = "Fairytale"
                        },
                        new
                        {
                            Id = 33,
                            Fiction = true,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 34,
                            Fiction = true,
                            Name = "Graphic novel"
                        },
                        new
                        {
                            Id = 35,
                            Fiction = true,
                            Name = "Historical fiction"
                        },
                        new
                        {
                            Id = 36,
                            Fiction = true,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 37,
                            Fiction = true,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 38,
                            Fiction = true,
                            Name = "Paranormal romance"
                        },
                        new
                        {
                            Id = 39,
                            Fiction = true,
                            Name = "Picture book"
                        },
                        new
                        {
                            Id = 40,
                            Fiction = true,
                            Name = "Poetry"
                        },
                        new
                        {
                            Id = 41,
                            Fiction = true,
                            Name = "Political thriller"
                        },
                        new
                        {
                            Id = 42,
                            Fiction = true,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 43,
                            Fiction = true,
                            Name = "Satire"
                        },
                        new
                        {
                            Id = 44,
                            Fiction = true,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 45,
                            Fiction = true,
                            Name = "Short story"
                        },
                        new
                        {
                            Id = 46,
                            Fiction = true,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 47,
                            Fiction = true,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 48,
                            Fiction = true,
                            Name = "Young adult"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookcaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookcaseId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", "ModuleAddOn")
                        .WithMany("Features")
                        .HasForeignKey("ModuleAddOnId");

                    b.Navigation("ModuleAddOn");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleAddOn", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", "ModuleAddOn")
                        .WithMany("UserModuleAddOns")
                        .HasForeignKey("ModuleAddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("UserModuleAddOns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleAddOn");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleFeature", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", null)
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("ModuleAddOnId");

                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleFeature", "ModuleFeature")
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("ModuleFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleFeature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Notes", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserInRoles", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserProfile", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("VueServer.Modules.Core.Models.User.WSUserProfile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserTokens", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Book", b =>
                {
                    b.HasOne("VueServer.Modules.Library.Models.Bookcase", "Bookcase")
                        .WithMany("Books")
                        .HasForeignKey("BookcaseId");

                    b.HasOne("VueServer.Modules.Library.Models.Series", "Series")
                        .WithMany("Books")
                        .HasForeignKey("SeriesId");

                    b.HasOne("VueServer.Modules.Library.Models.Shelf", "Shelf")
                        .WithMany("Books")
                        .HasForeignKey("ShelfId");

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookcase");

                    b.Navigation("Series");

                    b.Navigation("Shelf");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.BookAuthor", b =>
                {
                    b.HasOne("VueServer.Modules.Library.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Library.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.BookGenre", b =>
                {
                    b.HasOne("VueServer.Modules.Library.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Library.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Shelf", b =>
                {
                    b.HasOne("VueServer.Modules.Library.Models.Bookcase", "Bookcase")
                        .WithMany("Shelves")
                        .HasForeignKey("BookcaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookcase");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleAddOn", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("UserModuleAddOns");

                    b.Navigation("UserModuleFeatures");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.Navigation("UserModuleFeatures");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserModuleAddOns");

                    b.Navigation("UserModuleFeatures");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Bookcase", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Series", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("VueServer.Modules.Library.Models.Shelf", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
