// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueServer.Modules.Chat.Context;

#nullable disable

namespace VueServer.Migrations.SqliteChat
{
    [DbContext(typeof(SqliteChatContext))]
    partial class SqliteChatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConversationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ConversationHasUser", b =>
                {
                    b.Property<long>("ConversationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Owner")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationHasUser");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ReadReceipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadReceipts");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleAddOn", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = "documentation",
                            Name = "Documentation"
                        },
                        new
                        {
                            Id = "notes",
                            Name = "Notes"
                        },
                        new
                        {
                            Id = "chat",
                            Name = "Chat"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleAddOnId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = "chat-delete-message",
                            ModuleAddOnId = "chat",
                            Name = "Delete Messages"
                        },
                        new
                        {
                            Id = "chat-delete-conversation",
                            ModuleAddOnId = "chat",
                            Name = "Delete Conversations"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleAddOn", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "ModuleAddOnId");

                    b.HasIndex("ModuleAddOnId");

                    b.ToTable("UserHasModule");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleFeature", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleFeatureId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleAddOnId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "ModuleFeatureId");

                    b.HasIndex("ModuleAddOnId");

                    b.HasIndex("ModuleFeatureId");

                    b.ToTable("UserHasFeature");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.ServerSettings", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSGuestLogin", b =>
                {
                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Blocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FailedLogins")
                        .HasColumnType("INTEGER");

                    b.HasKey("IPAddress");

                    b.ToTable("GuestLogin");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "user",
                            DisplayName = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "elevated",
                            DisplayName = "Elevated",
                            NormalizedName = "ELEVATED"
                        },
                        new
                        {
                            Id = "administrator",
                            DisplayName = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PasswordExpired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Active = false,
                            DisplayName = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordExpired = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEBzpl5y0hSm19aDUlHuDuON/8ivDBGZh40h4WN+kXRQD+Q0WRKG7DOwj7PwIBKbRHw=="
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserInRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RoleId = "administrator",
                            UserId = "admin"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "admin"
                        });
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Valid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ChatMessage", b =>
                {
                    b.HasOne("VueServer.Modules.Chat.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ConversationHasUser", b =>
                {
                    b.HasOne("VueServer.Modules.Chat.Models.Conversation", "Conversation")
                        .WithMany("ConversationUsers")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ReadReceipt", b =>
                {
                    b.HasOne("VueServer.Modules.Chat.Models.ChatMessage", "Message")
                        .WithMany("ReadReceipts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", "ModuleAddOn")
                        .WithMany("Features")
                        .HasForeignKey("ModuleAddOnId");

                    b.Navigation("ModuleAddOn");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleAddOn", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", "ModuleAddOn")
                        .WithMany("UserModuleAddOns")
                        .HasForeignKey("ModuleAddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("UserModuleAddOns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleAddOn");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.UserHasModuleFeature", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleAddOn", null)
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("ModuleAddOnId");

                    b.HasOne("VueServer.Modules.Core.Models.Modules.ModuleFeature", "ModuleFeature")
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("ModuleFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("UserModuleFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleFeature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Notes", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserInRoles", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserProfile", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("VueServer.Modules.Core.Models.User.WSUserProfile", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUserTokens", b =>
                {
                    b.HasOne("VueServer.Modules.Core.Models.User.WSUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.ChatMessage", b =>
                {
                    b.Navigation("ReadReceipts");
                });

            modelBuilder.Entity("VueServer.Modules.Chat.Models.Conversation", b =>
                {
                    b.Navigation("ConversationUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleAddOn", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("UserModuleAddOns");

                    b.Navigation("UserModuleFeatures");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.Modules.ModuleFeature", b =>
                {
                    b.Navigation("UserModuleFeatures");
                });

            modelBuilder.Entity("VueServer.Modules.Core.Models.User.WSUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserModuleAddOns");

                    b.Navigation("UserModuleFeatures");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
